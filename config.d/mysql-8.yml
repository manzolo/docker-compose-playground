images:
  mysql-8:
    image: mysql:8.0
    shell: /bin/bash
    keep_alive_cmd: mysqld
    description: "MySQL 8.0 (Latest)"
    category: database
    
    environment:
      MYSQL_ROOT_PASSWORD: playground
      MYSQL_DATABASE: playground
      MYSQL_USER: playground
      MYSQL_PASSWORD: playground
    
    ports:
      - "3306:3306"
    
    motd: |
      ╔══════════════════════════════════════════════════════════════╗
      ║                    MySQL 8.0 Quick Reference                  ║
      ╚══════════════════════════════════════════════════════════════╝
      
      🔐 Connection Info:
         Host: localhost / Container IP
         Port: 3306
         Root User: root
         Root Password: playground
         User: playground
         Password: playground
         Database: playground
      
      📊 Basic Commands:
         mysql -u root -pplayground                    # Connect as root
         mysql -u playground -pplayground playground   # Connect to playground DB
      
      📁 Database Operations:
         SHOW DATABASES;                               # List all databases
         CREATE DATABASE mydb;                         # Create database
         USE mydb;                                     # Switch to database
         DROP DATABASE mydb;                           # Delete database
         SHOW TABLES;                                  # List tables
         DESCRIBE tablename;                           # Show table structure
      
      💾 Backup & Restore:
         # Backup single database
         mysqldump -u root -pplayground playground > /shared/backup.sql
         
         # Backup all databases
         mysqldump -u root -pplayground --all-databases > /shared/full_backup.sql
         
         # Backup specific table
         mysqldump -u root -pplayground playground users > /shared/users_backup.sql
         
         # Restore database
         mysql -u root -pplayground playground < /shared/backup.sql
         
         # Restore with creation
         mysql -u root -pplayground < /shared/backup.sql
      
      📝 Quick Table Example:
         CREATE TABLE users (
           id INT AUTO_INCREMENT PRIMARY KEY,
           name VARCHAR(100),
           email VARCHAR(100) UNIQUE,
           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
         );
         
         INSERT INTO users (name, email) VALUES 
           ('Alice', 'alice@example.com'),
           ('Bob', 'bob@example.com');
         
         SELECT * FROM users;
      
      🔍 Useful Queries:
         SELECT USER(), DATABASE();                    # Current user & DB
         SHOW PROCESSLIST;                            # Active connections
         SHOW VARIABLES LIKE '%version%';             # MySQL version info
         SHOW TABLE STATUS;                           # Table information
         SHOW FULL PROCESSLIST;                       # Detailed process list
      
      🔧 User Management:
         CREATE USER 'newuser'@'%' IDENTIFIED BY 'password';
         GRANT ALL PRIVILEGES ON database.* TO 'newuser'@'%';
         FLUSH PRIVILEGES;
         SHOW GRANTS FOR 'username'@'%';
      
      💡 Tips:
         - Use /shared for SQL dumps
         - root password: playground
         - Default character set: utf8mb4
    
    scripts:
      post_start:
        inline: |
          #!/bin/bash
          CONTAINER_NAME="$1"
          echo "🐬 Initializing MySQL 8.0 for $CONTAINER_NAME..."
          
          # Wait for MySQL to be ready with more thorough check
          echo "Waiting for MySQL to be ready..."
          MAX_WAIT=60
          COUNTER=0
          
          while [ $COUNTER -lt $MAX_WAIT ]; do
            # Check both ping AND actual query capability
            if docker exec "$CONTAINER_NAME" mysqladmin ping -u root -pplayground --silent 2>/dev/null && \
               docker exec "$CONTAINER_NAME" mysql -u root -pplayground -e "SELECT 1;" >/dev/null 2>&1; then
              echo "✓ MySQL is fully ready!"
              break
            fi
            COUNTER=$((COUNTER + 1))
            echo "Waiting... ($COUNTER/$MAX_WAIT)"
            sleep 2
          done
          
          if [ $COUNTER -ge $MAX_WAIT ]; then
            echo "⚠ MySQL did not become ready in time"
            exit 1
          fi
          
          # Create test table - one statement at a time
          echo "Creating test table..."
          
          # Create table
          docker exec "$CONTAINER_NAME" mysql -u playground -pplayground playground \
            -e "CREATE TABLE IF NOT EXISTS playground_info (
                  id INT AUTO_INCREMENT PRIMARY KEY,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  message TEXT,
                  version VARCHAR(50)
                );" 2>/dev/null
          
          TABLE_CREATED=$?
          
          if [ $TABLE_CREATED -eq 0 ]; then
            echo "✓ Table created successfully"
            
            # Insert data
            docker exec "$CONTAINER_NAME" mysql -u playground -pplayground playground \
              -e "INSERT INTO playground_info (message, version) 
                  VALUES ('MySQL initialized by playground manager', '8.0');" 2>/dev/null
            
            if [ $? -eq 0 ]; then
              echo "✓ Test data inserted"
              
              # Verify
              ROW_COUNT=$(docker exec "$CONTAINER_NAME" mysql -u playground -pplayground playground \
                -sN -e "SELECT COUNT(*) FROM playground_info;" 2>/dev/null)
              
              if [ "$ROW_COUNT" = "1" ]; then
                echo "✓ MySQL 8.0 fully initialized with test table and data"
              else
                echo "✓ MySQL 8.0 initialized (verification: $ROW_COUNT rows)"
              fi
            else
              echo "⚠ Table created but data insertion failed"
            fi
          else
            echo "⚠ Failed to create test table"
            # Try to get error details
            docker exec "$CONTAINER_NAME" mysql -u playground -pplayground playground \
              -e "SHOW TABLES;" 2>&1 | head -5
          fi
      
      pre_stop:
        inline: |
          #!/bin/bash
          CONTAINER_NAME="$1"
          echo "💾 Backing up MySQL databases from $CONTAINER_NAME..."
          
          BACKUP_DIR="${SHARED_DIR:-./shared-volumes}/backups/mysql-8"
          mkdir -p "$BACKUP_DIR"
          
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Try backup with multiple attempts
          MAX_ATTEMPTS=3
          ATTEMPT=1
          SUCCESS=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = "false" ]; do
            echo "Backup attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            # Check if container is still running
            if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
              echo "⚠ Container already stopped, cannot backup"
              break
            fi
            
            # Check if MySQL responds
            if docker exec "$CONTAINER_NAME" mysqladmin ping -u root -pplayground --silent 2>/dev/null; then
              echo "✓ MySQL is responding, creating backup..."
              
              # Backup playground database
              BACKUP_FILE="$BACKUP_DIR/mysql_playground_${TIMESTAMP}.sql"
              
              # Use timeout to prevent hanging
              timeout 30 docker exec "$CONTAINER_NAME" \
                mysqldump -u root -pplayground --single-transaction --quick playground \
                > "$BACKUP_FILE" 2>/dev/null
              
              MYSQLDUMP_EXIT=$?
              
              if [ $MYSQLDUMP_EXIT -eq 0 ] && [ -f "$BACKUP_FILE" ] && [ -s "$BACKUP_FILE" ]; then
                SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
                echo "✓ Database backup saved: backups/mysql-8/mysql_playground_${TIMESTAMP}.sql ($SIZE)"
                SUCCESS=true
                
                # Backup list of databases
                docker exec "$CONTAINER_NAME" \
                  mysql -u root -pplayground -e "SHOW DATABASES;" > \
                  "$BACKUP_DIR/databases_${TIMESTAMP}.txt" 2>/dev/null || true
                
                break
              else
                echo "⚠ Backup attempt $ATTEMPT failed (exit code: $MYSQLDUMP_EXIT)"
                rm -f "$BACKUP_FILE"
              fi
            else
              echo "⚠ MySQL not responding on attempt $ATTEMPT"
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            [ $ATTEMPT -le $MAX_ATTEMPTS ] && sleep 1
          done
          
          if [ "$SUCCESS" = "true" ]; then
            echo "✓ Backup completed successfully"
            exit 0
          else
            echo "⚠ All backup attempts failed"
            exit 1
          fi