images:
  golang-1.22:
    image: golang:1.22
    shell: /bin/bash
    keep_alive_cmd: sleep infinity
    description: "Go 1.22 (Latest)"
    category: programming
    
    motd: |
      ╔══════════════════════════════════════════════════════════════╗
      ║                   Go 1.22 Quick Reference                     ║
      ╚══════════════════════════════════════════════════════════════╝
      
      🔵 Go Environment:
         go version                                    # Check Go version
         go env                                        # Show environment
         go env GOPATH                                 # Show GOPATH
      
      📦 Module Management:
         go mod init myapp                             # Initialize module
         go mod tidy                                   # Clean dependencies
         go get package@version                        # Add dependency
         go mod download                               # Download dependencies
         go mod vendor                                 # Vendor dependencies
      
      🚀 Build & Run:
         go run main.go                                # Run directly
         go build -o myapp                             # Build executable
         go build -o /shared/myapp                     # Build to shared
         
         # Cross-compile examples
         GOOS=linux GOARCH=amd64 go build -o myapp
         GOOS=windows GOARCH=amd64 go build -o myapp.exe
         GOOS=darwin GOARCH=arm64 go build -o myapp
      
      🧪 Testing:
         go test                                       # Run tests
         go test -v                                    # Verbose output
         go test -cover                                # With coverage
         go test -bench=.                              # Run benchmarks
         go test -race                                 # Race detector
      
      📝 Quick HTTP Server Example:
         cat > /shared/server.go <<'EOF'
         package main
         
         import (
             "fmt"
             "net/http"
         )
         
         func main() {
             http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
                 fmt.Fprintf(w, "Hello from Go 1.22!")
             })
             fmt.Println("Server running on :8080")
             http.ListenAndServe(":8080", nil)
         }
         EOF
         
         go run /shared/server.go
      
      🔧 Useful Commands:
         go fmt ./...                                  # Format code
         go vet ./...                                  # Examine code
         go doc package                                # View documentation
         go list -m all                                # List dependencies
         go clean -cache                               # Clean build cache
      
      💡 Tips:
         - Use /shared for your projects
         - GOPATH is set to /go
         - Modules are cached in /go/pkg/mod
    
    scripts:
      post_start:
        inline: |
          #!/bin/bash
          CONTAINER_NAME="$1"
          echo "🔵 Initializing Go 1.22 for $CONTAINER_NAME..."
          
          # Install common Go tools
          docker exec "$CONTAINER_NAME" go install golang.org/x/tools/gopls@latest 2>/dev/null || true
          docker exec "$CONTAINER_NAME" go install github.com/go-delve/delve/cmd/dlv@latest 2>/dev/null || true
          
          # Create a sample project in /shared if not exists
          docker exec "$CONTAINER_NAME" sh -c "
            if [ ! -f /shared/go.mod ]; then
              cd /shared
              go mod init example.com/myapp 2>/dev/null || true
            fi
          " 2>/dev/null || true
          
          echo "✓ Go 1.22 initialized"
      
      pre_stop:
        inline: |
          #!/bin/bash
          CONTAINER_NAME="$1"
          echo "💾 Backing up Go projects for $CONTAINER_NAME..."
          
          BACKUP_DIR="${SHARED_DIR:-./shared-volumes}/backups/golang-1.22"
          mkdir -p "$BACKUP_DIR"
          
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Backup go.mod and go.sum if they exist
          if docker exec "$CONTAINER_NAME" test -f /shared/go.mod 2>/dev/null; then
            docker exec "$CONTAINER_NAME" cat /shared/go.mod > \
              "$BACKUP_DIR/go.mod_${TIMESTAMP}" 2>/dev/null
          fi
          
          if docker exec "$CONTAINER_NAME" test -f /shared/go.sum 2>/dev/null; then
            docker exec "$CONTAINER_NAME" cat /shared/go.sum > \
              "$BACKUP_DIR/go.sum_${TIMESTAMP}" 2>/dev/null
          fi
          
          echo "✓ Backup saved to: backups/golang-1.22/"