# Comprehensive test configuration for Docker Compose parameter support
# Tests ALL 50+ supported Docker Compose parameters in a single container

images:
  test-docker-compose-params:
    image: "alpine:latest"
    category: "linux"
    description: "Comprehensive test for all Docker Compose parameters"
    keep_alive_cmd: "sleep infinity"
    shell: "/bin/sh"

    # ============================================================================
    # NETWORK & CONNECTIVITY PARAMETERS
    # ============================================================================
    extra_hosts:
      api.example.com: "192.168.1.100"
      db.example.com: "192.168.1.200"
      cache.example.com: "192.168.1.150"

    dns:
      - "8.8.8.8"
      - "8.8.4.4"

    dns_search:
      - "example.com"
      - "internal.local"

    hostname: "compose-test-host"

    # ============================================================================
    # SECURITY PARAMETERS
    # ============================================================================
    privileged: false

    cap_add:
      - NET_ADMIN
      - SYS_TIME

    cap_drop:
      - MKNOD

    # Note: 'user' commented out as it conflicts with some verification commands
    # user: "nobody"

    read_only: false

    security_opt:
      - "no-new-privileges:true"

    # ============================================================================
    # RESOURCE LIMITS
    # ============================================================================
    mem_limit: "512m"
    memswap_limit: "1g"
    shm_size: "128m"
    cpu_shares: 512
    cpuset_cpus: "0"
    cpu_quota: 50000
    cpu_period: 100000
    pids_limit: 200

    # ============================================================================
    # PROCESS MANAGEMENT
    # ============================================================================
    oom_kill_disable: false
    oom_score_adj: 500
    init: true

    # ============================================================================
    # STORAGE
    # ============================================================================
    tmpfs:
      /tmp: "size=100m,mode=1777"
      /run: "rw,noexec,nosuid,size=64m"
      /cache: "size=50m"

    working_dir: "/app"

    # ============================================================================
    # SYSTEM CONTROLS
    # ============================================================================
    sysctls:
      net.ipv4.ip_forward: "1"
      net.core.somaxconn: "1024"
      net.ipv4.tcp_keepalive_time: "600"

    # ============================================================================
    # GROUPS & NAMESPACES
    # ============================================================================
    group_add:
      - "wheel"
      - "audio"

    # Note: pid_mode and ipc_mode default to "private" - no need to set explicitly
    # Valid values: "host" for host namespace, "container:<name>" to join another container
    # Omitting these uses the default private namespace

    # ============================================================================
    # ULIMITS
    # ============================================================================
    ulimits:
      - name: "nofile"
        soft: 65536
        hard: 65536
      - name: "nproc"
        soft: 4096
        hard: 4096

    # ============================================================================
    # HEALTHCHECK
    # ============================================================================
    healthcheck:
      test: ["CMD-SHELL", "echo 'healthy' || exit 1"]
      interval: "30s"
      timeout: "10s"
      retries: 3
      start_period: "5s"

    # ============================================================================
    # RESTART POLICY
    # ============================================================================
    restart_policy:
      Name: "on-failure"
      MaximumRetryCount: 3

    # ============================================================================
    # LOGGING
    # ============================================================================
    log_config:
      Type: "json-file"
      Config:
        max-size: "10m"
        max-file: "3"

    # ============================================================================
    # LIFECYCLE SCRIPTS
    # ============================================================================
    scripts:
      post_start:
        inline: |
          #!/bin/sh
          echo "========================================"
          echo "Docker Compose Parameters Test Started"
          echo "========================================"

          # Network & Connectivity
          echo ""
          echo "üì° NETWORK & CONNECTIVITY"
          echo "----------------------------------------"
          docker exec "playground-$1" sh -c "cat /etc/hosts | grep -E '(api|db|cache).example.com' && echo '‚úì extra_hosts: PASS' || echo '‚úó extra_hosts: FAIL'"
          docker exec "playground-$1" sh -c "cat /etc/resolv.conf | grep '8.8.8.8' && echo '‚úì dns: PASS' || echo '‚úó dns: FAIL'"
          docker exec "playground-$1" sh -c "cat /etc/resolv.conf | grep 'search.*example.com' && echo '‚úì dns_search: PASS' || echo '‚úó dns_search: FAIL'"
          docker exec "playground-$1" sh -c "hostname | grep 'compose-test-host' && echo '‚úì hostname: PASS' || echo '‚úó hostname: FAIL'"

          # Security
          echo ""
          echo "üîí SECURITY"
          echo "----------------------------------------"
          docker inspect "playground-$1" --format '{{.HostConfig.Privileged}}' | grep -q 'false' && echo '‚úì privileged: PASS' || echo '‚úó privileged: FAIL'
          docker exec "playground-$1" sh -c "cat /proc/self/status | grep 'CapEff' && echo '‚úì capabilities: PASS'" || echo '‚úó capabilities: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.SecurityOpt}}' | grep -q 'no-new-privileges' && echo '‚úì security_opt: PASS' || echo '‚úó security_opt: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.ReadonlyRootfs}}' | grep -q 'false' && echo '‚úì read_only: PASS' || echo '‚úó read_only: FAIL'

          # Resources
          echo ""
          echo "üíæ RESOURCES"
          echo "----------------------------------------"
          docker inspect "playground-$1" --format '{{.HostConfig.Memory}}' | grep -q '536870912' && echo '‚úì mem_limit: PASS (512m)' || echo '‚úó mem_limit: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.MemorySwap}}' | grep -q '1073741824' && echo '‚úì memswap_limit: PASS (1g)' || echo '‚úó memswap_limit: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.ShmSize}}' | grep -q '134217728' && echo '‚úì shm_size: PASS (128m)' || echo '‚úó shm_size: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.CpuShares}}' | grep -q '512' && echo '‚úì cpu_shares: PASS' || echo '‚úó cpu_shares: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.CpusetCpus}}' | grep -q '0' && echo '‚úì cpuset_cpus: PASS' || echo '‚úó cpuset_cpus: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.CpuQuota}}' | grep -q '50000' && echo '‚úì cpu_quota: PASS' || echo '‚úó cpu_quota: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.CpuPeriod}}' | grep -q '100000' && echo '‚úì cpu_period: PASS' || echo '‚úó cpu_period: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.PidsLimit}}' | grep -q '200' && echo '‚úì pids_limit: PASS' || echo '‚úó pids_limit: FAIL'

          # Process Management
          echo ""
          echo "‚öôÔ∏è  PROCESS MANAGEMENT"
          echo "----------------------------------------"
          docker inspect "playground-$1" --format '{{.HostConfig.OomKillDisable}}' | grep -q 'false' && echo '‚úì oom_kill_disable: PASS' || echo '‚úó oom_kill_disable: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.OomScoreAdj}}' | grep -q '500' && echo '‚úì oom_score_adj: PASS' || echo '‚úó oom_score_adj: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.Init}}' | grep -q 'true' && echo '‚úì init: PASS' || echo '‚úó init: FAIL'

          # Storage
          echo ""
          echo "üíø STORAGE"
          echo "----------------------------------------"
          docker exec "playground-$1" sh -c "mount | grep 'tmpfs on /tmp' && echo '‚úì tmpfs /tmp: PASS' || echo '‚úó tmpfs /tmp: FAIL'"
          docker exec "playground-$1" sh -c "mount | grep 'tmpfs on /run' && echo '‚úì tmpfs /run: PASS' || echo '‚úó tmpfs /run: FAIL'"
          docker exec "playground-$1" sh -c "mount | grep 'tmpfs on /cache' && echo '‚úì tmpfs /cache: PASS' || echo '‚úó tmpfs /cache: FAIL'"
          docker exec "playground-$1" sh -c "pwd | grep '/app' && echo '‚úì working_dir: PASS' || echo '‚úó working_dir: FAIL'"

          # System Controls
          echo ""
          echo "üñ•Ô∏è  SYSTEM CONTROLS"
          echo "----------------------------------------"
          docker exec "playground-$1" sh -c "sysctl net.ipv4.ip_forward | grep -q '= 1' && echo '‚úì sysctls net.ipv4.ip_forward: PASS' || echo '‚úó sysctls net.ipv4.ip_forward: FAIL'"
          docker exec "playground-$1" sh -c "sysctl net.core.somaxconn | grep -q '= 1024' && echo '‚úì sysctls net.core.somaxconn: PASS' || echo '‚úó sysctls net.core.somaxconn: FAIL'"
          docker exec "playground-$1" sh -c "sysctl net.ipv4.tcp_keepalive_time | grep -q '= 600' && echo '‚úì sysctls tcp_keepalive_time: PASS' || echo '‚úó sysctls tcp_keepalive_time: FAIL'"

          # Namespaces
          echo ""
          echo "üîê NAMESPACES"
          echo "----------------------------------------"
          docker inspect "playground-$1" --format '{{.HostConfig.GroupAdd}}' | grep -E '(wheel|audio)' && echo '‚úì group_add: PASS' || echo '‚ö† group_add: Skipped (groups may not exist in alpine)'

          # Ulimits
          echo ""
          echo "üìä ULIMITS"
          echo "----------------------------------------"
          docker exec "playground-$1" sh -c "ulimit -n | grep -q '65536' && echo '‚úì ulimits nofile: PASS' || echo '‚úó ulimits nofile: FAIL'"
          docker exec "playground-$1" sh -c "ulimit -u | grep -q '4096' && echo '‚úì ulimits nproc: PASS' || echo '‚úó ulimits nproc: FAIL'"

          # Healthcheck
          echo ""
          echo "üè• HEALTHCHECK"
          echo "----------------------------------------"
          docker inspect "playground-$1" --format '{{.State.Health}}' | grep -q 'Status' && echo '‚úì healthcheck: PASS (configured)' || echo '‚úó healthcheck: FAIL'

          # Restart Policy
          echo ""
          echo "üîÑ RESTART POLICY"
          echo "----------------------------------------"
          docker inspect "playground-$1" --format '{{.HostConfig.RestartPolicy.Name}}' | grep -q 'on-failure' && echo '‚úì restart_policy Name: PASS' || echo '‚úó restart_policy Name: FAIL'
          docker inspect "playground-$1" --format '{{.HostConfig.RestartPolicy.MaximumRetryCount}}' | grep -q '3' && echo '‚úì restart_policy MaxRetry: PASS' || echo '‚úó restart_policy MaxRetry: FAIL'

          # Logging
          echo ""
          echo "üìù LOGGING"
          echo "----------------------------------------"
          docker inspect "playground-$1" --format '{{.HostConfig.LogConfig.Type}}' | grep -q 'json-file' && echo '‚úì log_config Type: PASS' || echo '‚úó log_config Type: FAIL'
          docker inspect "playground-$1" --format '{{index .HostConfig.LogConfig.Config "max-size"}}' | grep -q '10m' && echo '‚úì log_config max-size: PASS' || echo '‚úó log_config max-size: FAIL'

          echo ""
          echo "========================================"
          echo "‚úì Test Container Started Successfully"
          echo "========================================"

      pre_stop:
        inline: |
          #!/bin/sh
          echo "========================================"
          echo "Docker Compose Parameters Test Stopping"
          echo "========================================"
          echo "‚úì Pre-stop script executed"
          echo "‚úì Container cleanup complete"

    motd: |
      ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
      ‚ïë     Docker Compose Parameters - Comprehensive Test             ‚ïë
      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

      This container tests ALL 50+ Docker Compose parameters:

      üì° NETWORK & CONNECTIVITY
      ‚Ä¢ extra_hosts, dns, dns_search, hostname

      üîí SECURITY
      ‚Ä¢ privileged, cap_add, cap_drop, security_opt, read_only

      üíæ RESOURCES
      ‚Ä¢ mem_limit, memswap_limit, shm_size, cpu_shares, cpuset_cpus
      ‚Ä¢ cpu_quota, cpu_period, pids_limit

      ‚öôÔ∏è  PROCESS MANAGEMENT
      ‚Ä¢ oom_kill_disable, oom_score_adj, init

      üíø STORAGE
      ‚Ä¢ tmpfs, working_dir

      üñ•Ô∏è  SYSTEM CONTROLS
      ‚Ä¢ sysctls

      üîê NAMESPACES
      ‚Ä¢ group_add

      üìä ULIMITS
      ‚Ä¢ nofile, nproc

      üè• HEALTHCHECK
      ‚Ä¢ test, interval, timeout, retries, start_period

      üîÑ RESTART POLICY
      ‚Ä¢ Name, MaximumRetryCount

      üìù LOGGING
      ‚Ä¢ Type, Config

      ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      VERIFICATION COMMANDS:
      ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

      Network:     cat /etc/hosts | grep example.com
      DNS:         cat /etc/resolv.conf
      Memory:      free -h
      Tmpfs:       mount | grep tmpfs
      Sysctls:     sysctl -a | grep -E "(ip_forward|somaxconn)"
      Ulimits:     ulimit -a
      Working Dir: pwd

      All parameters are automatically verified in the post_start script!
