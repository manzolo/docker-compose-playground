# Metadati del gruppo
group:
  name: "PHP-MySQL-Stack"
  description: "PHP application with MySQL 8 database and phpMyAdmin web interface"
  category: programming
  containers: 
    - mysql-8-stack
    - php-apache-stack
    - phpmyadmin-stack

# Configurazioni dei container
images:
  mysql-8-stack:
    category: database
    description: MySQL 8 Database Server
    image: mysql:8
    keep_alive_cmd: mysqld
    shell: /bin/bash
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: playground
      MYSQL_ROOT_PASSWORD: playground
      MYSQL_USER: playground
      MYSQL_PASSWORD: playground
    scripts:
      post_start:
        inline: |
          #!/bin/bash
          echo "Initializing MySQL..."
          
          # Wait for MySQL
          MAX_WAIT=60
          COUNT=0
          while [ $COUNT -lt $MAX_WAIT ]; do
            if docker exec "${CONTAINER_NAME}" mysqladmin ping -u root -pplayground --silent 2>/dev/null; then
              echo "‚úì MySQL is ready!"
              break
            fi
            sleep 2
            COUNT=$((COUNT + 2))
          done
          
          sleep 5
          
          # Create tables and insert data
          docker exec "${CONTAINER_NAME}" mysql -u root -pplayground playground -e "
          CREATE TABLE IF NOT EXISTS users (
              id INT AUTO_INCREMENT PRIMARY KEY,
              username VARCHAR(50) UNIQUE NOT NULL,
              email VARCHAR(100),
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          CREATE TABLE IF NOT EXISTS products (
              id INT AUTO_INCREMENT PRIMARY KEY,
              name VARCHAR(100) NOT NULL,
              price DECIMAL(10,2),
              category VARCHAR(50)
          );
          
          CREATE TABLE IF NOT EXISTS posts (
              id INT AUTO_INCREMENT PRIMARY KEY,
              title VARCHAR(255) NOT NULL,
              content TEXT,
              user_id INT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (user_id) REFERENCES users(id)
          );
          
          INSERT IGNORE INTO users (id, username, email) VALUES 
            (1, 'admin', 'admin@playground.local'),
            (2, 'user1', 'user1@example.com'),
            (3, 'php_user', 'php@example.com');
          
          INSERT IGNORE INTO products (id, name, price, category) VALUES 
            (1, 'Laptop', 999.99, 'Electronics'),
            (2, 'Mouse', 29.99, 'Electronics'),
            (3, 'Keyboard', 79.99, 'Electronics');
          
          INSERT IGNORE INTO posts (id, title, content, user_id) VALUES 
            (1, 'Welcome to PHP Stack', 'This is a sample post from PHP application.', 1),
            (2, 'Database Connected', 'PHP is successfully connected to MySQL database.', 3);
          " 2>/dev/null
          
          echo "‚úì MySQL initialized with PHP-ready database"
      
      pre_stop:
        inline: |
          #!/bin/bash
          BACKUP_DIR="${SHARED_DIR}/backups/${CONTAINER_NAME#playground-}"
          mkdir -p "${BACKUP_DIR}"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          docker exec "${CONTAINER_NAME}" mysqldump -u root -pplayground playground > "${BACKUP_DIR}/mysql_${TIMESTAMP}.sql" 2>/dev/null
          gzip "${BACKUP_DIR}/mysql_${TIMESTAMP}.sql"
          echo "‚úì Backup created"
    
    motd: |
      ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
      ‚ïë                MySQL 8 Database Server                       ‚ïë
      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      
      üîê Connection:
         Host: mysql-8-stack or localhost
         Port: 3306
         User: root / playground
         Password: playground
         Database: playground
      
      üìä Quick Commands:
         mysql -u root -pplayground playground
         SHOW TABLES;
         SELECT * FROM users;
      
      üåê phpMyAdmin: http://localhost:8088
      üåê PHP Application: http://localhost:8080

  php-apache-stack:
    category: web
    description: "PHP 8.3 with Apache and MySQL extensions"
    image: php:8.3-apache
    keep_alive_cmd: apache2-foreground
    shell: /bin/bash
    ports:
      - "8080:80"
    environment:
      MYSQL_HOST: mysql-8-stack
      MYSQL_DATABASE: playground
      MYSQL_USER: playground
      MYSQL_PASSWORD: playground
    scripts:
      post_start:
        inline: |
          #!/bin/bash
          echo "Setting up PHP application..."
          
          # Create necessary directories
          docker exec "${CONTAINER_NAME}" mkdir -p /var/www/html/api
          
          # Check available MySQL extensions
          echo "Checking MySQL extensions..."
          docker exec "${CONTAINER_NAME}" php -m | grep -i mysql
          
          # Deploy application files
          echo "Deploying PHP application..."
          
          # Create main application file
          docker exec "${CONTAINER_NAME}" sh -c 'cat > /var/www/html/index.php << "EOF"
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>PHP MySQL Stack</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: #4CAF50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
                  .card { background: #f9f9f9; padding: 15px; margin: 10px 0; border-left: 4px solid #4CAF50; }
                  .success { color: #4CAF50; font-weight: bold; }
                  .error { color: #f44336; font-weight: bold; }
                  table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #f2f2f2; }
                  .stats { display: flex; gap: 20px; margin: 20px 0; flex-wrap: wrap; }
                  .stat-box { flex: 1; min-width: 150px; background: #e8f5e8; padding: 15px; border-radius: 5px; text-align: center; }
                  .link-box { display: block; padding: 10px; margin: 5px 0; background: #e3f2fd; border-radius: 4px; text-decoration: none; color: #1976d2; }
                  .link-box:hover { background: #bbdefb; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üöÄ PHP MySQL Stack</h1>
                      <p>Full-stack development environment with PHP, MySQL, and phpMyAdmin</p>
                  </div>

                  <?php
                  $host = getenv("MYSQL_HOST") ?: "mysql-8-stack";
                  $dbname = getenv("MYSQL_DATABASE") ?: "playground";
                  $username = getenv("MYSQL_USER") ?: "playground";
                  $password = getenv("MYSQL_PASSWORD") ?: "playground";
                  $php_version = phpversion();
                  
                  echo "<div class=\"card\">";
                  echo "<h3>üìä System Information</h3>";
                  echo "<p><strong>PHP Version:</strong> $php_version</p>";
                  
                  // Check MySQL extensions
                  $pdo_mysql = extension_loaded("pdo_mysql");
                  $mysqli = extension_loaded("mysqli");
                  $mysqlnd = extension_loaded("mysqlnd");
                  
                  echo "<p><strong>MySQL Extensions:</strong> ";
                  if ($pdo_mysql && $mysqli) {
                      echo "<span class=\"success\">‚úÖ pdo_mysql, mysqli (mysqlnd)</span>";
                  } else {
                      echo "<span class=\"error\">‚ùå Missing extensions</span>";
                  }
                  echo "</p>";
                  
                  if ($pdo_mysql) {
                      try {
                          $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
                          $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                          
                          echo "<p><strong>Database Connection:</strong> <span class=\"success\">‚úÖ Connected</span></p>";
                          
                          $mysql_version = $pdo->getAttribute(PDO::ATTR_SERVER_VERSION);
                          echo "<p><strong>MySQL Version:</strong> $mysql_version</p>";
                          
                          // Get table counts
                          $users_count = $pdo->query("SELECT COUNT(*) FROM users")->fetchColumn();
                          $products_count = $pdo->query("SELECT COUNT(*) FROM products")->fetchColumn();
                          $posts_count = $pdo->query("SELECT COUNT(*) FROM posts")->fetchColumn();
                          
                          echo "</div>";
                          
                          // Display statistics
                          echo "<div class=\"stats\">";
                          echo "<div class=\"stat-box\"><h3>üë• Users</h3><p style=\"font-size: 24px; margin: 10px 0;\">$users_count</p></div>";
                          echo "<div class=\"stat-box\"><h3>üì¶ Products</h3><p style=\"font-size: 24px; margin: 10px 0;\">$products_count</p></div>";
                          echo "<div class=\"stat-box\"><h3>üìù Posts</h3><p style=\"font-size: 24px; margin: 10px 0;\">$posts_count</p></div>";
                          echo "</div>";
                          
                          // Get recent posts
                          $posts = $pdo->query("
                              SELECT p.title, p.content, p.created_at, u.username 
                              FROM posts p 
                              LEFT JOIN users u ON p.user_id = u.id 
                              ORDER BY p.created_at DESC 
                              LIMIT 5
                          ")->fetchAll(PDO::FETCH_ASSOC);
                          
                          if (!empty($posts)) {
                              echo "<h3>üìù Recent Posts</h3>";
                              echo "<table>";
                              echo "<thead><tr><th>Title</th><th>Author</th><th>Content</th><th>Created At</th></tr></thead>";
                              echo "<tbody>";
                              foreach ($posts as $post) {
                                  echo "<tr>";
                                  echo "<td><strong>" . htmlspecialchars($post["title"]) . "</strong></td>";
                                  echo "<td>" . htmlspecialchars($post["username"]) . "</td>";
                                  echo "<td>" . htmlspecialchars(substr($post["content"], 0, 100)) . "...</td>";
                                  echo "<td>" . $post["created_at"] . "</td>";
                                  echo "</tr>";
                              }
                              echo "</tbody></table>";
                          }
                          
                      } catch (PDOException $e) {
                          echo "<p><strong>Database Connection:</strong> <span class=\"error\">‚ùå Failed: " . $e->getMessage() . "</span></p>";
                          echo "</div>";
                      }
                  } else {
                      echo "<p><strong>Database Connection:</strong> <span class=\"error\">‚ùå PDO MySQL extension not available</span></p>";
                      echo "</div>";
                  }
                  ?>
                  
                  <div class="card">
                      <h3>üîß Quick Links</h3>
                      <a href="http://localhost:8088" target="_blank" class="link-box">
                          üìä phpMyAdmin - Database management interface
                      </a>
                      <a href="/phpinfo.php" target="_blank" class="link-box">
                          ‚ÑπÔ∏è PHP Info - Detailed PHP configuration
                      </a>
                      <a href="/api/users.php" target="_blank" class="link-box">
                          üîå Users API - JSON API endpoint
                      </a>
                      <a href="/api/health.php" target="_blank" class="link-box">
                          ‚ù§Ô∏è Health Check - System status
                      </a>
                  </div>
              </div>
          </body>
          </html>
          EOF'
          
          # Create phpinfo
          docker exec "${CONTAINER_NAME}" sh -c 'echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php'
          
          # Create health endpoint
          docker exec "${CONTAINER_NAME}" sh -c 'cat > /var/www/html/api/health.php << "EOF"
          <?php
          header("Content-Type: application/json");
          $status = [
              "service" => "PHP MySQL Stack",
              "timestamp" => date("c"),
              "status" => "operational",
              "components" => []
          ];
          
          $status["components"]["php"] = [
              "version" => phpversion(),
              "status" => "operational"
          ];
          
          $pdo_mysql = extension_loaded("pdo_mysql");
          $mysqli = extension_loaded("mysqli");
          
          $status["components"]["mysql_extensions"] = [
              "pdo_mysql" => $pdo_mysql,
              "mysqli" => $mysqli,
              "status" => ($pdo_mysql && $mysqli) ? "operational" : "degraded"
          ];
          
          if ($pdo_mysql) {
              $host = getenv("MYSQL_HOST") ?: "mysql-8-stack";
              $dbname = getenv("MYSQL_DATABASE") ?: "playground";
              $username = getenv("MYSQL_USER") ?: "playground";
              $password = getenv("MYSQL_PASSWORD") ?: "playground";
              
              try {
                  $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
                  $status["components"]["database"] = [
                      "connected" => true,
                      "status" => "operational",
                      "version" => $pdo->getAttribute(PDO::ATTR_SERVER_VERSION)
                  ];
              } catch (PDOException $e) {
                  $status["components"]["database"] = [
                      "connected" => false,
                      "status" => "error",
                      "error" => $e->getMessage()
                  ];
                  $status["status"] = "degraded";
              }
          } else {
              $status["components"]["database"] = [
                  "connected" => false,
                  "status" => "error",
                  "message" => "PDO MySQL extension not available"
              ];
              $status["status"] = "degraded";
          }
          
          echo json_encode($status, JSON_PRETTY_PRINT);
          ?>
          EOF'
          
          # Create users API
          docker exec "${CONTAINER_NAME}" sh -c 'cat > /var/www/html/api/users.php << "EOF"
          <?php
          header("Content-Type: application/json");
          $host = getenv("MYSQL_HOST") ?: "mysql-8-stack";
          $dbname = getenv("MYSQL_DATABASE") ?: "playground";
          $username = getenv("MYSQL_USER") ?: "playground";
          $password = getenv("MYSQL_PASSWORD") ?: "playground";
          
          $response = ["success" => false, "data" => []];
          
          if (extension_loaded("pdo_mysql")) {
              try {
                  $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
                  $stmt = $pdo->query("SELECT id, username, email, created_at FROM users ORDER BY created_at DESC");
                  $users = $stmt->fetchAll(PDO::FETCH_ASSOC);
                  
                  $response = [
                      "success" => true,
                      "data" => $users,
                      "count" => count($users)
                  ];
              } catch (PDOException $e) {
                  $response["error"] = $e->getMessage();
              }
          } else {
              $response["error"] = "PDO MySQL extension not available";
          }
          
          echo json_encode($response, JSON_PRETTY_PRINT);
          ?>
          EOF'

          docker exec playground-php-apache-stack docker-php-ext-install mysqli pdo_mysql
          docker exec playground-php-apache-stack docker-php-ext-enable mysqli pdo_mysql
          docker restart playground-php-apache-stack
          
          echo "‚úì PHP application deployed successfully"
          echo "üåê Application: http://localhost:8080"
          echo "‚ÑπÔ∏è  PHP Info: http://localhost:8080/phpinfo.php"
          echo "üîå API: http://localhost:8080/api/users.php"
          echo "‚ù§Ô∏è  Health: http://localhost:8080/api/health.php"
    
    motd: |
      ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
      ‚ïë                PHP 8.3 with Apache                          ‚ïë
      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      
      üåê Application: http://localhost:8080
      ‚ÑπÔ∏è  PHP Info: http://localhost:8080/phpinfo.php
      üìä API: http://localhost:8080/api/users.php
      ‚ù§Ô∏è  Health: http://localhost:8080/api/health.php
      
      üîß Features:
         ‚Ä¢ PHP 8.3 with Apache
         ‚Ä¢ MySQL Native Driver (mysqlnd)
         ‚Ä¢ PDO MySQL & MySQLi extensions
         ‚Ä¢ Sample application with database connection
         ‚Ä¢ REST API endpoints

  phpmyadmin-stack:
    category: database
    description: phpMyAdmin - MySQL Web Interface
    image: phpmyadmin:latest
    keep_alive_cmd: /docker-entrypoint.sh apache2-foreground
    shell: /bin/bash
    ports:
      - "8088:80"
    environment:
      PMA_HOST: mysql-8-stack
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: playground
      MYSQL_ROOT_PASSWORD: playground
    scripts:
      post_start:
        inline: |
          #!/bin/bash
          echo "Configuring phpMyAdmin auto-login..."
          sleep 5
          
          docker exec "${CONTAINER_NAME}" sh -c '
          cat > /etc/phpmyadmin/config.user.inc.php << "EOF"
          <?php
          $cfg["Servers"][$i]["auth_type"] = "config";
          $cfg["Servers"][$i]["user"] = "root";
          $cfg["Servers"][$i]["password"] = "playground";
          $cfg["Servers"][$i]["AllowNoPassword"] = true;
          $cfg["LoginCookieValidity"] = 86400;
          $cfg["Servers"][$i]["only_db"] = "";
          ?>
          EOF
          '
          
          echo "‚úì phpMyAdmin ready at http://localhost:8088"
    
    motd: |
      ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
      ‚ïë              phpMyAdmin - Web Interface                     ‚ïë
      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      
      üåê Access: http://localhost:8088
      üîê Auto-login: Enabled (root/playground)