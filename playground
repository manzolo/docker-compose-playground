#!/bin/bash
#############################################
# Docker Playground CLI Launcher
# Manages Python venv and executes CLI
#############################################

set -e

# Directory dello script
# Se eseguito tramite symlink, segui il link per trovare la directory reale
if [ -L "${BASH_SOURCE[0]}" ]; then
    SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
else
    SCRIPT_PATH="${BASH_SOURCE[0]}"
fi

PROJECT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
VENV_BASE_DIR="${PROJECT_DIR}/venv/environments"
VENV_NAME="python-3.12"
VENV_PATH="${VENV_BASE_DIR}/${VENV_NAME}"
REQ_FILE="${PROJECT_DIR}/venv/requirements-cli.txt"
CLI_SCRIPT="${PROJECT_DIR}/src/cli/cli.py"
CACHE_FILE="${PROJECT_DIR}/venv/.cli_venv_ready"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funzioni di logging
log_info() {
    echo -e "${CYAN}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[✓]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[⚠]${NC} $*"
}

log_error() {
    echo -e "${RED}[✗]${NC} $*" >&2
    exit 1
}

# Verifica se il venv è già configurato e aggiornato
is_venv_ready() {
    if [ ! -f "$CACHE_FILE" ]; then
        return 1
    fi
    
    # Controlla se requirements.txt è cambiato
    if [ ! -f "$REQ_FILE" ]; then
        return 1
    fi
    
    local req_hash=$(md5sum "$REQ_FILE" 2>/dev/null | cut -d' ' -f1)
    local cached_hash=$(cat "$CACHE_FILE" 2>/dev/null)
    
    if [ "$req_hash" != "$cached_hash" ]; then
        return 1
    fi
    
    # Verifica che il venv esista
    if [ ! -f "$VENV_PATH/bin/activate" ]; then
        return 1
    fi
    
    return 0
}

# Crea e configura il virtual environment
setup_venv() {
    log_info "Setting up Python virtual environment..."
    
    # Verifica dipendenze di sistema
    if ! command -v python3 >/dev/null 2>&1; then
        log_error "Python3 not found. Install it with: sudo apt-get install python3 python3-venv"
    fi
    
    # Crea directory
    mkdir -p "$VENV_BASE_DIR" "$(dirname "$REQ_FILE")"
    
    # Crea requirements.txt per CLI
    cat > "$REQ_FILE" << 'EOF'
typer>=0.12.5
docker>=7.1.0
pyyaml>=6.0.2
rich>=13.7.0
EOF
    
    # Rimuovi venv esistente se non è valido
    if [ -d "$VENV_PATH" ] && [ ! -f "$VENV_PATH/bin/activate" ]; then
        log_warning "Removing invalid venv..."
        rm -rf "$VENV_PATH"
    fi
    
    # Crea virtual environment se non esiste
    if [ ! -d "$VENV_PATH" ]; then
        log_info "Creating Python virtual environment..."
        python3 -m venv "$VENV_PATH" || log_error "Failed to create venv"
    fi
    
    # Attiva venv
    source "$VENV_PATH/bin/activate"
    
    # Aggiorna pip silenziosamente
    log_info "Upgrading pip..."
    pip install --upgrade pip --quiet 2>/dev/null || log_error "Failed to upgrade pip"
    
    # Installa dipendenze
    log_info "Installing dependencies..."
    pip install -r "$REQ_FILE" --quiet 2>/dev/null || log_error "Failed to install dependencies"
    
    # Salva hash del requirements per cache
    md5sum "$REQ_FILE" 2>/dev/null | cut -d' ' -f1 > "$CACHE_FILE"
    
    log_success "Virtual environment ready"
}

# Verifica che il CLI script esista
verify_cli() {
    if [ ! -f "$CLI_SCRIPT" ]; then
        log_error "CLI script not found at $CLI_SCRIPT"
    fi
}

# Mostra banner (solo se non ci sono argomenti)
show_banner() {
    if [ $# -eq 0 ]; then
        cat << 'EOF'
╔══════════════════════════════════════════╗
║   🐳  Docker Playground CLI              ║
║   Manage containerized environments      ║
╚══════════════════════════════════════════╝

EOF
    fi
}

# Mostra quick help se nessun argomento
show_quick_help() {
    cat << 'EOF'
Quick Commands:
  playground list              List all containers
  playground ps                Show running containers
  playground start <name>      Start a container
  playground stop <name>       Stop a container
  playground logs <name>       Show container logs
  playground exec <name>       Open shell in container
  playground --help            Full help

EOF
}

# Main execution
main() {
    # Cambia nella directory del progetto
    cd "$PROJECT_DIR"
    
    # Mostra banner
    show_banner "$@"
    
    # Verifica CLI script
    verify_cli
    
    # Setup venv solo se necessario
    if ! is_venv_ready; then
        setup_venv
    else
        # Attiva venv esistente silenziosamente
        source "$VENV_PATH/bin/activate" 2>/dev/null
    fi
    
    # Se nessun argomento, mostra quick help
    if [ $# -eq 0 ]; then
        show_quick_help
        python3 "$CLI_SCRIPT" --help
        exit 0
    fi
    
    # Esegui CLI con tutti gli argomenti
    python3 "$CLI_SCRIPT" "$@"
}

# Trap per cleanup
cleanup() {
    # Deattiva venv se attivo
    if [ -n "$VIRTUAL_ENV" ]; then
        deactivate 2>/dev/null || true
    fi
}

trap cleanup EXIT

# Esegui main
main "$@"